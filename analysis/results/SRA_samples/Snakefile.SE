import glob
def get_fq1(wildcards):
    # code that returns a list of fastq files for read 1 based on *wildcards.sample* e.g.
    return sorted(glob.glob("/srv/scratch/oateslab/rawData/2021/SRA_RNA_seq/*/" + wildcards.sample + '.fastq.gz'))

def get_fq2(wildcards):
    # code that returns a list of fastq files for read 2 based on *wildcards.sample*, e.g.
    return sorted(glob.glob("/srv/scratch/oateslab/rawData/2021/SRA_RNA_seq/*/" + wildcards.sample + '_2.fastq.gz'))

rule star_pe_multi:
    input:
        # use a list for multiple fastq files for one sample
        # usually technical replicates across lanes/flowcells
        fq1 = get_fq1
        # paired end reads needs to be ordered so each item in the two lists match
        #fq2 = get_fq2
    output:
        # see STAR manual for additional output files
        temp("star/{sample}/Aligned.out.bam"),
        temp("star/{sample}/Aligned.toTranscriptome.out.bam")
    log:
        "logs/{sample}.star.log"
    params:
        # path to STAR reference genome index
        index="/srv/scratch/oateslab/share/data/hg38/STAR_ref_index/STARv275a_genome_GRCh38_noALT_noHLA_noDecoy_ERCC_v34_oh100/",
        #index="/srv/scratch/oateslab/share/data/hg38/forTesting/star_index_chr22/",
        # optional parameters
        extra="--outTmpDir $TMPDIR/star  "\
+ "        --runMode alignReads "\
+ "    --twopassMode Basic "\
+ "    --outFilterMultimapNmax 20 "\
+ "    --alignSJoverhangMin 8 "\
+ "    --alignSJDBoverhangMin 1 "\
+ "    --outFilterMismatchNmax 999 "\
+ "    --outFilterMismatchNoverLmax 0.1 "\
+ "    --alignIntronMin 20 "\
+ "    --alignIntronMax 1000000 "\
+ "    --alignMatesGapMax 1000000 "\
+ "    --outFilterType BySJout "\
+ "    --outFilterScoreMinOverLread 0.33 "\
+ "    --outFilterMatchNminOverLread 0.33 "\
+ "    --limitSjdbInsertNsj 1200000 "\
+ "    --outSAMstrandField intronMotif "\
+ "    --outFilterIntronMotifs None "\
+ "    --alignSoftClipAtReferenceEnds Yes "\
+ "    --quantMode TranscriptomeSAM GeneCounts "\
+ "    --outSAMtype BAM Unsorted "\
+ "    --outSAMunmapped Within "\
+ "    --genomeLoad NoSharedMemory "\
+ "    --chimSegmentMin 15 "\
+ "    --chimJunctionOverhangMin 15 "\
+ "    --chimOutType Junctions WithinBAM SoftClip "\
+ "    --chimMainSegmentMultNmax 1 "\
+ "    --outSAMattributes NH HI AS nM NM ch "\
+ "    --outSAMattrRGline ID:rg1 SM:sm1 "
    threads: 2
    script:
        "scripts/align.py"


rule samtools_sort:
    input:
        "star/{sample}/Aligned.out.bam"
    output:
        temp("star/{sample}.Aligned.sortedByCoord.out.bam")
    params:
        extra = "-m 10G",
        tmp_dir = "$TMPDIR/"
    log:
        "logs/{sample}.sort.log"
    threads:  # Samtools takes additional threads through its option -@
        4     # This value - 1 will be sent to -@.
    script:
        "scripts/sort.py"

rule samtools_index:
    input:
        "star/{sample}.Aligned.sortedByCoord.out.bam"
    output:
        "star/{sample}.Aligned.sortedByCoord.out.md.bam",
        temp("star/{sample}.Aligned.sortedByCoord.out.bam.bai")
    log:
        "logs/samtools_index/{sample}.log"
    params:
        "" # optional params string
    threads:  # Samtools takes additional threads through its option -@
        4     # This value - 1 will be sent to -@
    shell:
        "samtools index -@ {threads} {input} {input}.bai {log};" + \
	"python3 -u scripts/run_MarkDuplicates.py {input} star/{wildcards.sample} --jar /apps/picard/2.18.26/picard.jar -m 20;" + \
	"samtools index -@ {threads} star/{wildcards.sample}.Aligned.sortedByCoord.out.md.bam star/{wildcards.sample}.Aligned.sortedByCoord.out.md.bam.bai;"
pwd = os.getcwd()
rule count_reads:
    input:
        "star/{sample}.Aligned.sortedByCoord.out.md.bam"
    output:
        protected("count_reads/{sample}.Aligned.sortedByCoord.out.md.bam.intron"),
        protected("count_reads/{sample}.Aligned.sortedByCoord.out.md.bam.exon")

    threads:  
        4     
    shell:
        "sh scripts/CountReads.sh " + pwd + "/{input} " + pwd + "/count_reads/"


